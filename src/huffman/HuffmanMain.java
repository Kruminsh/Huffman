/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package huffman;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

/**
 *
 * @author arturs vitolins
 */
public class HuffmanMain extends javax.swing.JFrame {

    /**
     * Creates new form HuffmanMain
     */
    public HuffmanMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        compressButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        decompressButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        compressButton.setText("Arhivēt Failu");
        compressButton.setName(""); // NOI18N
        compressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compressButtonActionPerformed(evt);
            }
        });

        jTextField1.setEnabled(false);

        decompressButton.setText("Atarhivēt failu");
        decompressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decompressButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(compressButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(decompressButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addComponent(decompressButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compressButton)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void decompressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decompressButtonActionPerformed
        String encodedFilePath = "./test-encoded.txt";

        StringBuilder encodedFileContentBulder = new StringBuilder();
        FileUtils.readFileIntoStringBuild(encodedFileContentBulder, encodedFilePath);

        String encodedFileContent = encodedFileContentBulder.toString();
        int offset = 1;
        int indexOfEncodingTableStart = encodedFileContent.indexOf("{") + offset;
        int indexOfEncodingTableEnd = encodedFileContent.indexOf("}");

        String encodingTableString = encodedFileContent.substring(indexOfEncodingTableStart, indexOfEncodingTableEnd);
        String characterEncodingArray[] = encodingTableString.split(",");

        Map<String, Character> encodingTable = new HashMap<>();

        for (String keyValuePair : characterEncodingArray) {
            String[] keyValue = keyValuePair.split("=");
            int asciiCode= Integer.valueOf(keyValue[0]);
            encodingTable.put(keyValue[1], (char) asciiCode );
        }
        
        System.out.println(encodingTable.toString());

        String encodedContent = encodedFileContent.substring(indexOfEncodingTableEnd + offset);
        String manualEOF = "0000000";

        StringBuilder byteStringBuilder = new StringBuilder();
        for (byte single : encodedContent.getBytes()) {
            String formatedStingByte = String.format("%7s", Integer.toBinaryString(single & 0xFF)).replace(' ', '0');

            if (formatedStingByte.equals(manualEOF) && !encodingTable.containsKey(manualEOF)) {
                break;
            }

            byteStringBuilder.append(formatedStingByte);
        }

        encodedContent = byteStringBuilder.toString();
        StringBuilder decodedTextBuilder = new StringBuilder();

        System.out.println("decoding-start");
        StringBuilder encodedByteBuilder = new StringBuilder();
        for (char encodedChar : encodedContent.toCharArray()) {
            encodedByteBuilder.append(encodedChar);

            if (encodingTable.containsKey(encodedByteBuilder.toString())) {
                decodedTextBuilder.append(encodingTable.get(encodedByteBuilder.toString()));
                encodedByteBuilder = new StringBuilder();
            }
        }
        System.out.println("decoding-end");

        FileWriter myWriter;
        try {
            myWriter = new FileWriter("./test-decoded.txt");
            myWriter.write(decodedTextBuilder.toString());
            myWriter.close();
            System.out.println("CREATED DECODED FILE SUCCESFULLY");
        } catch (Exception ex) {

        }


    }//GEN-LAST:event_decompressButtonActionPerformed

    private void compressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressButtonActionPerformed
        String filePath = jTextField1.getText();
        filePath = "./test.txt";

        Map<String, Integer> table = HuffmanUtils.buildFrequencyTable(filePath);

        System.out.println(table);

        PriorityQueue<HuffmanNode> queue = HuffmanUtils.buildPriorityQueue(table);

        HuffmanNode root = HuffmanUtils.buildEncodingTree(queue);

        Map<Character, String> codeMap = new HashMap<>();
        HuffmanUtils.buildEncodingMap(root, "", codeMap);

        System.out.println(codeMap);

        try (FileWriter myWriter = new FileWriter("./test-encoded.txt")) {
            StringBuilder fileContent = new StringBuilder();
            FileUtils.readFileIntoStringBuild(fileContent, filePath);            
            
            String encodedString = HuffmanUtils.encodeFileContentByCodeMap(fileContent, codeMap);

            HuffmanUtils.writeCodeMapToFile(myWriter, codeMap);
            HuffmanUtils.writeEncodedStringToFile(myWriter, encodedString);

            System.out.println("ENCODED FILE SUCCESSFULLY");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_compressButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HuffmanMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HuffmanMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HuffmanMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HuffmanMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HuffmanMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton compressButton;
    private javax.swing.JButton decompressButton;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
